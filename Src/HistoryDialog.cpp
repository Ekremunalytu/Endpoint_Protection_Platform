#include "../Headers/HistoryDialog.h"
#include "ui_historydialog.h" // Generated by uic
#include <QTableWidget>
#include <QTableWidgetItem>
#include <QHeaderView>
#include <QPushButton>
#include <QHBoxLayout>
#include <QDateTime>
#include <QDebug>
#include <QMessageBox>
#include <QFileDialog>
#include <QDir>
#include <QRandomGenerator> // Added for QRandomGenerator

HistoryDialog::HistoryDialog(QWidget *parent) :
    QDialog(parent),
    ui(new Ui::HistoryDialog)
{
    ui->setupUi(this);
    // dbManager_ = DbManager::getInstance(); // Example if using a DbManager singleton

    setupConnections();
    loadHistory(); // Load initial history data
}

HistoryDialog::~HistoryDialog()
{
    delete ui;
}

void HistoryDialog::setupConnections() {
    connect(ui->tabWidget, &QTabWidget::currentChanged, this, &HistoryDialog::onTabChanged);
    connect(ui->clearHistoryButton, &QPushButton::clicked, this, &HistoryDialog::onClearHistoryClicked);
    connect(ui->exportHistoryButton, &QPushButton::clicked, this, &HistoryDialog::onExportHistoryClicked);
    // The closeButton's accepted() signal is connected to QDialog::accept() in the .ui file.
}

void HistoryDialog::onTabChanged(int index) {
    qDebug() << "Switched to tab:" << ui->tabWidget->tabText(index);
    // Potentially load or refresh data for the selected tab if not all loaded at once
}

void HistoryDialog::onClearHistoryClicked() {
    QMessageBox::StandardButton reply;
    reply = QMessageBox::question(this, tr("Clear History"), 
                                  tr("Are you sure you want to clear all scan history? This operation cannot be undone."),
                                  QMessageBox::Yes | QMessageBox::No);
    if (reply == QMessageBox::Yes) {
        // Assuming history is cleared from a database or storage
        // For example: dbManager_->clearAllHistory();
        // Then refresh the tables:
        ui->scanHistoryTable->setRowCount(0);
        ui->vtHistoryTable->setRowCount(0);
        ui->cdrHistoryTable->setRowCount(0);
        ui->sandboxHistoryTable->setRowCount(0);
        QMessageBox::information(this, tr("History Cleared"), tr("All scan history has been cleared."));
    }
}

void HistoryDialog::onExportHistoryClicked() {
    QString fileName = QFileDialog::getSaveFileName(this, tr("Export Scan History"), 
                                                  QDir::homePath() + "/scan_history.csv", 
                                                  tr("CSV files (*.csv)"));
    if (!fileName.isEmpty()) {
        // Implement actual CSV export logic here
        // For example: exportManager->exportTablesToCsv(fileName, 
        //                                              {ui->scanHistoryTable, ui->vtHistoryTable, ...});
        QMessageBox::information(this, tr("Export Successful"), tr("Scan history has been exported to %1").arg(fileName));
    }
}

void HistoryDialog::loadHistory() {
    // This is a placeholder for loading data. 
    // In a real application, you would fetch this data from a database or file.
    // For demonstration, we'll add some dummy data similar to the original example.

    // Dummy data for Offline Scans
    QJsonArray offlineData;
    for (int i = 0; i < 5; ++i) {
        QJsonObject entry;
        entry["dateTime"] = QDateTime::currentDateTime().addDays(-i).toString(Qt::ISODate);
        entry["file"] = QString("report_%1.pdf").arg(i + 1);
        entry["size"] = QString("%1 KB").arg(QRandomGenerator::global()->bounded(100, 501)); // Replaced qrand
        entry["duration"] = QString("%1 sec").arg(QRandomGenerator::global()->bounded(1, 11)); // Replaced qrand
        entry["result"] = (i % 2 == 0) ? "Malicious" : "Clean";
        offlineData.append(entry);
    }
    populateTable(ui->scanHistoryTable, offlineData, {tr("Date & Time"), tr("File"), tr("Size"), tr("Scan Duration"), tr("Result"), tr("Actions")});

    // Dummy data for VirusTotal Scans
    QJsonArray vtData;
    for (int i = 0; i < 3; ++i) {
        QJsonObject entry;
        entry["dateTime"] = QDateTime::currentDateTime().addDays(-i).toString(Qt::ISODate);
        entry["file"] = QString("sample_file_%1.exe").arg(i + 1);
        entry["detectionRate"] = QString("%1/70").arg(QRandomGenerator::global()->bounded(0, 10)); // Replaced qrand
        entry["hash"] = QString("abcdef1234567890defabc%1").arg(i);
        entry["result"] = (i % 2 == 0) ? "Suspicious" : "Clean";
        vtData.append(entry);
    }
    populateTable(ui->vtHistoryTable, vtData, {tr("Date & Time"), tr("File"), tr("Detection Rate"), tr("Hash"), tr("Result"), tr("Actions")});

    // Dummy data for CDR Processing
    QJsonArray cdrData;
    for (int i = 0; i < 2; ++i) {
        QJsonObject entry;
        entry["dateTime"] = QDateTime::currentDateTime().addDays(-i).toString(Qt::ISODate);
        entry["file"] = QString("document_%1.docx").arg(i + 1);
        entry["type"] = "DOCX";
        entry["threatsFound"] = QString::number(QRandomGenerator::global()->bounded(0, 5)); // Replaced qrand
        entry["cleanedFile"] = QString("/path/to/cleaned_doc_%1.docx").arg(i+1);
        cdrData.append(entry);
    }
    populateTable(ui->cdrHistoryTable, cdrData, {tr("Date & Time"), tr("File"), tr("Type"), tr("Threats Found"), tr("Cleaned File"), tr("Actions")});

    // Dummy data for Sandbox Analysis
    QJsonArray sandboxData;
    for (int i = 0; i < 4; ++i) {
        QJsonObject entry;
        entry["dateTime"] = QDateTime::currentDateTime().addDays(-i).toString(Qt::ISODate);
        entry["file"] = QString("suspicious_app_%1.msi").arg(i + 1);
        entry["riskScore"] = QString("%1/100").arg(QRandomGenerator::global()->bounded(40, 101)); // Replaced qrand
        entry["behaviors"] = "File Access, Network Connection";
        entry["networkActivity"] = (i%2==0) ? "C2 Server Contacted" : "Benign Activity";
        sandboxData.append(entry);
    }
    populateTable(ui->sandboxHistoryTable, sandboxData, {tr("Date & Time"), tr("File"), tr("Risk Score"), tr("Behaviors"), tr("Network Activity"), tr("Actions")});
}

void HistoryDialog::populateTable(QTableWidget* table, const QJsonArray& data, const QStringList& headers) {
    table->setRowCount(0);
    table->setColumnCount(headers.size());
    table->setHorizontalHeaderLabels(headers);

    for (int i = 0; i < data.size(); ++i) {
        QJsonObject item = data[i].toObject();
        int row = table->rowCount();
        table->insertRow(row);

        table->setItem(row, 0, new QTableWidgetItem(QDateTime::fromString(item["dateTime"].toString(), Qt::ISODate).toString("dd.MM.yyyy hh:mm")));
        table->setItem(row, 1, new QTableWidgetItem(item["file"].toString()));

        if (table == ui->scanHistoryTable) {
            table->setItem(row, 2, new QTableWidgetItem(item["size"].toString()));
            table->setItem(row, 3, new QTableWidgetItem(item["duration"].toString()));
            QTableWidgetItem* resultItem = new QTableWidgetItem(item["result"].toString());
            if (item["result"].toString() == "Malicious") resultItem->setForeground(QColor("#F44336"));
            else resultItem->setForeground(QColor("#4CAF50"));
            table->setItem(row, 4, resultItem);
        } else if (table == ui->vtHistoryTable) {
            table->setItem(row, 2, new QTableWidgetItem(item["detectionRate"].toString()));
            table->setItem(row, 3, new QTableWidgetItem(item["hash"].toString()));
            QTableWidgetItem* resultItem = new QTableWidgetItem(item["result"].toString());
            if (item["result"].toString() == "Suspicious") resultItem->setForeground(QColor("#FF9800"));
            else resultItem->setForeground(QColor("#4CAF50"));
            table->setItem(row, 4, resultItem);
        } else if (table == ui->cdrHistoryTable) {
            table->setItem(row, 2, new QTableWidgetItem(item["type"].toString()));
            table->setItem(row, 3, new QTableWidgetItem(item["threatsFound"].toString()));
            table->setItem(row, 4, new QTableWidgetItem(item["cleanedFile"].toString()));
        } else if (table == ui->sandboxHistoryTable) {
            QTableWidgetItem* riskItem = new QTableWidgetItem(item["riskScore"].toString());
            int score = item["riskScore"].toString().split("/").first().toInt();
            if (score > 70) riskItem->setForeground(QColor("#F44336"));
            else if (score > 40) riskItem->setForeground(QColor("#FF9800"));
            else riskItem->setForeground(QColor("#4CAF50"));
            table->setItem(row, 2, riskItem);
            table->setItem(row, 3, new QTableWidgetItem(item["behaviors"].toString()));
            table->setItem(row, 4, new QTableWidgetItem(item["networkActivity"].toString()));
        }

        // Add View button (placeholder)
        QPushButton* viewButton = new QPushButton(tr("View Details"));
        viewButton->setStyleSheet("QPushButton { background-color: transparent; color: #2196f3; border: 1px solid #2196f3; border-radius: 4px; padding: 5px 10px; } QPushButton:hover { background-color: rgba(33, 150, 243, 0.1); }");
        connect(viewButton, &QPushButton::clicked, [item]() {
            QMessageBox::information(nullptr, tr("Details"), tr("Showing details for: %1").arg(item["file"].toString()));
        });
        table->setCellWidget(row, headers.size() - 1, viewButton); // Last column for actions
    }

    table->horizontalHeader()->setSectionResizeMode(QHeaderView::ResizeToContents);
    table->horizontalHeader()->setSectionResizeMode(1, QHeaderView::Stretch); // File column stretch
    if (table->columnCount() > 5) {
         table->horizontalHeader()->setSectionResizeMode(headers.size() -1, QHeaderView::ResizeToContents); // Actions column
    }
}
